Practical Report

The maximum number of nodes stored in BFTS is 1473871
The total number of nodes generated in BFTS is 2298274

The maximum number of nodes stored in BFGS is 1592
The total number of nodes generated in BFGS is 4359

The maximum number of nodes stored in DFGS is 14480
The total number of nodes generated in DFGS is 34266

DFTS runs until an OutOfMemory error appears.
Thus we deduce that DFS using Tree Search entered a loop and will never find the solution.

The maximum number of nodes stored in IDTS is 28
The total number of nodes generated in IDTS is 621664

This is a demonstration of breadth-first tree search on Romania tour

The maximum number of nodes stored in BFTS is 44217
The total number of nodes generated in BFTS is 75973

The maximum number of nodes stored in BFGS is 186
The total number of nodes generated in BFGS is 947

The maximum number of nodes stored in IDTS is 29
The total number of nodes generated in IDTS is 11996

The maximum number of nodes stored in DFGS is 19
The total number of nodes generated in DFGS is 62

DFTS doesn't terminate

DFGS doesn't yield an optimal solution in both cases
IDTS may yield or may not, depending on the step size. It has a low number of stored nodes as it uses DFS at each step.
However, the total nodes generated are more as it repeats node generation at each depth.

package search;

public interface Frontier {
  void add(Node node);
  void clear();
  boolean isEmpty();
  Node remove();
  int maxNumberOfNodes();
}


package search;

import java.util.*;
public class DepthFirstFrontier implements Frontier {
  private Stack<Node> stack = new Stack<Node>();
  private int maxNumberOfNodes = 0;
  
  public void add(Node node) {
    stack.push(node);
    if(stack.size() > maxNumberOfNodes) maxNumberOfNodes = stack.size();
  }
  
  public void clear() {
    stack.clear();
  }
  
  public boolean isEmpty() {
    return stack.isEmpty();
  }
  
  public Node remove() {
    if(!isEmpty()) {
      return stack.pop();
    }
    else throw new java.lang.Error("The frontier is empty");
  }
  
  public int maxNumberOfNodes() {
    return maxNumberOfNodes;
  }
}

package search;

import java.util.*;
public class BreadthFirstFrontier implements Frontier{
  private Queue<Node> queue = new LinkedList<Node>();
  private int maxNumberOfNodes = 0;
  
  public void add(Node node) {
	  queue.add(node);
	  if(queue.size() > maxNumberOfNodes) maxNumberOfNodes = queue.size();
  }
  
  public void clear() {
    queue.clear();
  }
  
  public boolean isEmpty() {
    return queue.isEmpty();
  }
  
  public Node remove() {
    if(!isEmpty()) {
      return queue.remove();
    }
    else throw new java.lang.Error("The frontier is empty");
  }
  
  public int maxNumberOfNodes() {
    return maxNumberOfNodes;
  }
}

package search;

public class TreeSearch implements Search {
  private Frontier frontier;
  private int nodesGenerated = 0;
  public TreeSearch(Frontier fr) {
    frontier = fr;
  }
  public Node findSolution(Node root, GoalTest goalTest) {
    nodesGenerated = 1;
    frontier.add(root);
    while (!frontier.isEmpty()) {
      Node node = frontier.remove();
      if(goalTest.isGoal(node.state)) return node;
      else {
        for (Action action : node.state.getApplicableActions()) {
          nodesGenerated += 1;
          frontier.add(new Node(node, action, node.state.getActionResult(action)));
        }
      }
    }
    return null;
  }
  public int nodesGenerated() {
    return nodesGenerated;
  }
  public int maxNumberOfNodes() {
    return frontier.maxNumberOfNodes();
  }
}

package search;

import java.util.HashSet;
import java.util.Set;

public class GraphSearch implements Search{
    private Frontier frontier;
    private int nodesGenerated = 0;
    public GraphSearch(Frontier fr) {
        frontier = fr;
    }
    public Node findSolution(Node root, GoalTest goalTest) {
        nodesGenerated = 1;
        Set<State> exploredStates = new HashSet<State>();
        frontier.add(root);
        exploredStates.add(root.state);
        while (!frontier.isEmpty()) {
            Node node = frontier.remove();
            if(goalTest.isGoal(node.state)) return node;
            else {
                for (Action action : node.state.getApplicableActions()) {
                    State newState = node.state.getActionResult(action);
                    if (!exploredStates.contains(newState)) {
                        exploredStates.add(newState);
                        nodesGenerated += 1;
                        frontier.add(new Node(node, action, newState));
                    }
                }
            }
        }
        return null;
    }
    public int nodesGenerated() {
        return nodesGenerated;
    }
    public int maxNumberOfNodes() {
      return frontier.maxNumberOfNodes();
    }
}


package search;

public class IterativeDeepeningTreeSearch implements Search {
  private DepthFirstFrontier frontier = new DepthFirstFrontier();
  private int nodesGenerated = 0;
  private int depth;
  public IterativeDeepeningTreeSearch(int depth) {
    this.depth = depth;
  }
  public Node findSolution(Node root, GoalTest goalTest) {
    nodesGenerated = 1;
    int maxDepth = depth;
    while(true) {
      frontier.add(root);
      while (!frontier.isEmpty()) {
        Node node = frontier.remove();
        if(goalTest.isGoal(node.state)) return node;
        else if(node.depth < maxDepth){
          for (Action action : node.state.getApplicableActions()) {
            nodesGenerated += 1;
            frontier.add(new Node(node, action, node.state.getActionResult(action), node.depth + 1));
          }
        }
      }
      frontier.clear();
      maxDepth += depth;
    }
  }
  public int nodesGenerated() {
    return nodesGenerated;
  }
  public int maxNumberOfNodes() {
    return frontier.maxNumberOfNodes();
  }
}

package npuzzle;

import search.BreadthFirstFrontier;
//import search.BreadthFirstTreeSearch;
import search.DepthFirstFrontier;
import search.GoalTest;
import search.GraphSearch;
import search.IterativeDeepeningTreeSearch;
import search.Node;
import search.Printing;
import search.Search;
import search.TreeSearch;

public class BFTS_Demo {
	public static void main(String[] args) {
		System.out.println("This is a demonstration of search on 8-puzzle");
		System.out.println();
		
		Tiles initialConfiguration = new Tiles(new int[][] {
			{ 7, 4, 2 },
			{ 8, 1, 3 },
			{ 5, 0, 6 }
		});
		Node root = new Node(null, null, initialConfiguration, 0);
		GoalTest goalTest = new TilesGoalTest();
		Printing printing = new NPuzzlePrinting();
		Search BFTS = new TreeSearch(new BreadthFirstFrontier());
    Search BFGS = new GraphSearch(new BreadthFirstFrontier());
    Search DFTS = new TreeSearch(new DepthFirstFrontier());
    Search DFGS = new GraphSearch(new DepthFirstFrontier());
    Search IDTS = new IterativeDeepeningTreeSearch(1);
		Node solution = BFTS.findSolution(root, goalTest);
		printing.printSolution(solution);
		System.out.println("The maximum number of nodes stored in BFTS is " + BFTS.maxNumberOfNodes());
    System.out.println("The total number of nodes generated in BFTS is " + BFTS.nodesGenerated());
    System.out.println("");
    solution = BFGS.findSolution(root, goalTest);
    printing.printSolution(solution);
    System.out.println("The maximum number of nodes stored in BFGS is " + BFGS.maxNumberOfNodes());
    System.out.println("The total number of nodes generated in BFGS is " + BFGS.nodesGenerated());
    System.out.println("");
    solution = IDTS.findSolution(root, goalTest);
    printing.printSolution(solution);
    System.out.println("The maximum number of nodes stored in IDTS is " + IDTS.maxNumberOfNodes());
    System.out.println("The total number of nodes generated in IDTS is " + IDTS.nodesGenerated());
    System.out.println("");
    solution = DFGS.findSolution(root, goalTest);
    printing.printSolution(solution);
    System.out.println("The maximum number of nodes stored in DFGS is " + DFGS.maxNumberOfNodes());
    System.out.println("The total number of nodes generated in DFGS is " + DFGS.nodesGenerated());
    System.out.println("");
    solution = DFTS.findSolution(root, goalTest);
    printing.printSolution(solution);
    System.out.println("The maximum number of nodes stored in DFTS is " + DFTS.maxNumberOfNodes());
    System.out.println("The total number of nodes generated in DFTS is " + DFTS.nodesGenerated());
	}
}


package tour;

import search.BreadthFirstFrontier;
import search.DepthFirstFrontier;
import search.GoalTest;
import search.GraphSearch;
import search.IterativeDeepeningTreeSearch;
import search.Node;
import search.Printing;
import search.Search;
import search.TreeSearch;

public class BFTS_Demo {
	public static void main(String[] args) {
		System.out.println("This is a demonstration of breadth-first tree search on Romania tour");
		System.out.println();
		
		Cities romania = SetUpRomania.getRomaniaMap();
		City startCity = romania.getState("Bucharest");
		
		GoalTest goalTest = new TourGoalTest(romania.getAllCities(), startCity);
		
		Node root = new Node(null, null, new TourState(startCity), 0);
    Printing printing = new TourPrinting();
    Search BFTS = new TreeSearch(new BreadthFirstFrontier());
    Search BFGS = new GraphSearch(new BreadthFirstFrontier());
    Search DFTS = new TreeSearch(new DepthFirstFrontier());
    Search DFGS = new GraphSearch(new DepthFirstFrontier());
    Search IDTS = new IterativeDeepeningTreeSearch(1);
    Node solution = BFTS.findSolution(root, goalTest);
    printing.printSolution(solution);
    System.out.println("The maximum number of nodes stored in BFTS is " + BFTS.maxNumberOfNodes());
    System.out.println("The total number of nodes generated in BFTS is " + BFTS.nodesGenerated());
    System.out.println("");
    solution = BFGS.findSolution(root, goalTest);
    printing.printSolution(solution);
    System.out.println("The maximum number of nodes stored in BFGS is " + BFGS.maxNumberOfNodes());
    System.out.println("The total number of nodes generated in BFGS is " + BFGS.nodesGenerated());
    System.out.println("");
    solution = IDTS.findSolution(root, goalTest);
    printing.printSolution(solution);
    System.out.println("The maximum number of nodes stored in IDTS is " + IDTS.maxNumberOfNodes());
    System.out.println("The total number of nodes generated in IDTS is " + IDTS.nodesGenerated());
    System.out.println("");
    solution = DFGS.findSolution(root, goalTest);
    printing.printSolution(solution);
    System.out.println("The maximum number of nodes stored in DFGS is " + DFGS.maxNumberOfNodes());
    System.out.println("The total number of nodes generated in DFGS is " + DFGS.nodesGenerated());
    System.out.println("");
    solution = DFTS.findSolution(root, goalTest);
    printing.printSolution(solution);
    System.out.println("The maximum number of nodes stored in DFTS is " + DFTS.maxNumberOfNodes());
    System.out.println("The total number of nodes generated in DFTS is " + DFTS.nodesGenerated());
	}
}




